package main

import (
	"reflect"
	"testing"
)

func TestSolve(t *testing.T) {
	puzzles := []struct {
		name     string
		grid     Grid
		solution []Grid
	}{
		{
			name: "Easy",
			grid: MakeGrid([][]int{
				//0 1  2  3  4  5  6  7  8
				{0, 9, 0, 0, 0, 0, 8, 5, 3}, // 0
				{0, 0, 0, 8, 0, 0, 0, 0, 4}, // 1
				{0, 0, 8, 2, 0, 3, 0, 6, 9}, // 2
				{5, 7, 4, 0, 0, 2, 0, 0, 0}, // 3
				{0, 0, 0, 0, 0, 0, 0, 0, 0}, // 4
				{0, 0, 0, 9, 0, 0, 6, 3, 7}, // 5
				{9, 4, 0, 1, 0, 8, 5, 0, 0}, // 6
				{7, 0, 0, 0, 0, 6, 0, 0, 0}, // 7
				{6, 8, 2, 0, 0, 0, 0, 9, 0}, // 8
			}),

			solution: []Grid{MakeGrid([][]int{
				{2, 9, 7, 6, 1, 4, 8, 5, 3},
				{1, 3, 6, 8, 5, 9, 7, 2, 4},
				{4, 5, 8, 2, 7, 3, 1, 6, 9},
				{5, 7, 4, 3, 6, 2, 9, 1, 8},
				{3, 6, 9, 7, 8, 1, 2, 4, 5},
				{8, 2, 1, 9, 4, 5, 6, 3, 7},
				{9, 4, 3, 1, 2, 8, 5, 7, 6},
				{7, 1, 5, 4, 9, 6, 3, 8, 2},
				{6, 8, 2, 5, 3, 7, 4, 9, 1},
			})},
		}, {
			// From https://www.flickr.com/photos/npcomplete/2361922699
			name: "Hard",
			grid: MakeGrid([][]int{
				//0 1  2  3  4  5  6  7  8
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 3, 0, 8, 5},
				{0, 0, 1, 0, 2, 0, 0, 0, 0},
				{0, 0, 0, 5, 0, 7, 0, 0, 0},
				{0, 0, 4, 0, 0, 0, 1, 0, 0},
				{0, 9, 0, 0, 0, 0, 0, 0, 0},
				{5, 0, 0, 0, 0, 0, 0, 7, 3},
				{0, 0, 2, 0, 1, 0, 0, 0, 0},
				{0, 0, 0, 0, 4, 0, 0, 0, 9},
			}),

			solution: []Grid{MakeGrid([][]int{
				{2, 9, 7, 6, 1, 4, 8, 5, 3},
				{1, 3, 6, 8, 5, 9, 7, 2, 4},
				{4, 5, 8, 2, 7, 3, 1, 6, 9},
				{5, 7, 4, 3, 6, 2, 9, 1, 8},
				{3, 6, 9, 7, 8, 1, 2, 4, 5},
				{8, 2, 1, 9, 4, 5, 6, 3, 7},
				{9, 4, 3, 1, 2, 8, 5, 7, 6},
				{7, 1, 5, 4, 9, 6, 3, 8, 2},
				{6, 8, 2, 5, 3, 7, 4, 9, 1},
			}), MakeGrid([][]int{
				{9, 8, 7, 6, 5, 4, 3, 2, 1},
				{2, 4, 6, 1, 7, 3, 9, 8, 5},
				{3, 5, 1, 9, 2, 8, 7, 4, 6},
				{1, 2, 8, 5, 3, 7, 6, 9, 4},
				{6, 3, 4, 8, 9, 2, 1, 5, 7},
				{7, 9, 5, 4, 6, 1, 8, 3, 2},
				{5, 1, 9, 2, 8, 6, 4, 7, 3},
				{4, 7, 2, 3, 1, 9, 5, 6, 8},
				{8, 6, 3, 7, 4, 5, 2, 1, 9},
			})},
		}}

	var solver SudokuSolver

	for _, p := range puzzles {
		got := solver.Solve(p.grid)

		if !reflect.DeepEqual(got, p.solution) {
			t.Errorf("sudoku.Solve(%q) got:\n%v\n\nwant:\n%v", p.name, got, p.solution)
		}
	}
}
